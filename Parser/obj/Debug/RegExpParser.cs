//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\MyPrivateWork\MyApps\MyApplications\EDUFLEX\Parser\RegExpParser.g4 by ANTLR 4.6.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Parser {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.5")]
[System.CLSCompliant(false)]
public partial class RegExpParser : Parser {
	public const int
		ID=1, COLON=2, SEMICOLON=3, WS_DEFAULT=4, LB=5, LBH=6, ENDOFLINE=7, STARTOFLINE=8, 
		STARTCODEANCHOR=9, LP=10, RP=11, QMARK=12, DIESIS=13, ANY_EXCEPT_EOL=14, 
		SEMI=15, ONEORMULTIPLE=16, NONEORMULTIPLE=17, ONEORMULTIPLE_NONGREEDY=18, 
		NONEORMULTIPLE_NONGREEDY=19, ALTERNATION=20, ESCSLASH=21, EXMARK=22, LESS=23, 
		EQUAL=24, WS_REGEXP=25, LITERAL_CHARACTER=26, CLOSURE_FLAG=27, STRING_FLAG=28, 
		CODE=29, ENDCODEANCHOR=30, LCA=31, RAC=32, COMMAC=33, NUMBER=34, WS_CLOSURE=35, 
		SET_LITERAL_CHARACTER=36, HYPTHEN=37, RB=38, CONTROL_CHARACTERS=39, INTEGER=40, 
		WS_SET=41, STRING=42;
	public const int
		RULE_lexerDescription = 0, RULE_regexp_statement = 1, RULE_action_code = 2, 
		RULE_regexp = 3, RULE_regexp_conc = 4, RULE_regexp_closure = 5, RULE_regexp_basic = 6, 
		RULE_assertions = 7, RULE_quantifier = 8, RULE_finate_closure_range = 9, 
		RULE_set = 10, RULE_setitems = 11, RULE_setitem = 12, RULE_setchar = 13, 
		RULE_range = 14, RULE_char = 15;
	public static readonly string[] ruleNames = {
		"lexerDescription", "regexp_statement", "action_code", "regexp", "regexp_conc", 
		"regexp_closure", "regexp_basic", "assertions", "quantifier", "finate_closure_range", 
		"set", "setitems", "setitem", "setchar", "range", "char"
	};

	private static readonly string[] _LiteralNames = {
		null, null, "':'", "';'", null, "'['", "'[^'", "'$'", "'^'", "'{'", "'('", 
		"')'", "'?'", "'#'", "'.'", null, "'+'", "'*'", "'+?'", "'*?'", "'|'", 
		"'\\'", "'!'", "'<'", "'='", null, null, null, null, null, null, "'~{'", 
		null, "','", null, null, null, "'-'", "']'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "ID", "COLON", "SEMICOLON", "WS_DEFAULT", "LB", "LBH", "ENDOFLINE", 
		"STARTOFLINE", "STARTCODEANCHOR", "LP", "RP", "QMARK", "DIESIS", "ANY_EXCEPT_EOL", 
		"SEMI", "ONEORMULTIPLE", "NONEORMULTIPLE", "ONEORMULTIPLE_NONGREEDY", 
		"NONEORMULTIPLE_NONGREEDY", "ALTERNATION", "ESCSLASH", "EXMARK", "LESS", 
		"EQUAL", "WS_REGEXP", "LITERAL_CHARACTER", "CLOSURE_FLAG", "STRING_FLAG", 
		"CODE", "ENDCODEANCHOR", "LCA", "RAC", "COMMAC", "NUMBER", "WS_CLOSURE", 
		"SET_LITERAL_CHARACTER", "HYPTHEN", "RB", "CONTROL_CHARACTERS", "INTEGER", 
		"WS_SET", "STRING"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RegExpParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public RegExpParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class LexerDescriptionContext : ParserRuleContext {
		public Regexp_statementContext[] regexp_statement() {
			return GetRuleContexts<Regexp_statementContext>();
		}
		public Regexp_statementContext regexp_statement(int i) {
			return GetRuleContext<Regexp_statementContext>(i);
		}
		public LexerDescriptionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lexerDescription; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.EnterLexerDescription(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.ExitLexerDescription(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRegExpParserVisitor<TResult> typedVisitor = visitor as IRegExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLexerDescription(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public LexerDescriptionContext lexerDescription() {
		LexerDescriptionContext _localctx = new LexerDescriptionContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_lexerDescription);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 33;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 32; regexp_statement();
				}
				}
				State = 35;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==ID || _la==COLON );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Regexp_statementContext : ParserRuleContext {
		public ITerminalNode COLON() { return GetToken(RegExpParser.COLON, 0); }
		public RegexpContext regexp() {
			return GetRuleContext<RegexpContext>(0);
		}
		public ITerminalNode SEMICOLON() { return GetToken(RegExpParser.SEMICOLON, 0); }
		public ITerminalNode ID() { return GetToken(RegExpParser.ID, 0); }
		public Action_codeContext action_code() {
			return GetRuleContext<Action_codeContext>(0);
		}
		public Regexp_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexp_statement; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.EnterRegexp_statement(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.ExitRegexp_statement(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRegExpParserVisitor<TResult> typedVisitor = visitor as IRegExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexp_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Regexp_statementContext regexp_statement() {
		Regexp_statementContext _localctx = new Regexp_statementContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_regexp_statement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 38;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==ID) {
				{
				State = 37; Match(ID);
				}
			}

			State = 40; Match(COLON);
			State = 41; regexp(0);
			State = 43;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==STARTCODEANCHOR) {
				{
				State = 42; action_code();
				}
			}

			State = 45; Match(SEMICOLON);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Action_codeContext : ParserRuleContext {
		public ITerminalNode STARTCODEANCHOR() { return GetToken(RegExpParser.STARTCODEANCHOR, 0); }
		public ITerminalNode CODE() { return GetToken(RegExpParser.CODE, 0); }
		public ITerminalNode ENDCODEANCHOR() { return GetToken(RegExpParser.ENDCODEANCHOR, 0); }
		public Action_codeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_action_code; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.EnterAction_code(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.ExitAction_code(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRegExpParserVisitor<TResult> typedVisitor = visitor as IRegExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAction_code(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Action_codeContext action_code() {
		Action_codeContext _localctx = new Action_codeContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_action_code);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47; Match(STARTCODEANCHOR);
			State = 48; Match(CODE);
			State = 49; Match(ENDCODEANCHOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RegexpContext : ParserRuleContext {
		public RegexpContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexp; } }
	 
		public RegexpContext() { }
		public virtual void CopyFrom(RegexpContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Regexp_alternationContext : RegexpContext {
		public RegexpContext regexp() {
			return GetRuleContext<RegexpContext>(0);
		}
		public ITerminalNode ALTERNATION() { return GetToken(RegExpParser.ALTERNATION, 0); }
		public Regexp_concContext regexp_conc() {
			return GetRuleContext<Regexp_concContext>(0);
		}
		public Regexp_alternationContext(RegexpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.EnterRegexp_alternation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.ExitRegexp_alternation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRegExpParserVisitor<TResult> typedVisitor = visitor as IRegExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexp_alternation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Regexp_alternation_otherContext : RegexpContext {
		public Regexp_concContext regexp_conc() {
			return GetRuleContext<Regexp_concContext>(0);
		}
		public Regexp_alternation_otherContext(RegexpContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.EnterRegexp_alternation_other(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.ExitRegexp_alternation_other(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRegExpParserVisitor<TResult> typedVisitor = visitor as IRegExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexp_alternation_other(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RegexpContext regexp() {
		return regexp(0);
	}

	private RegexpContext regexp(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		RegexpContext _localctx = new RegexpContext(_ctx, _parentState);
		RegexpContext _prevctx = _localctx;
		int _startState = 6;
		EnterRecursionRule(_localctx, 6, RULE_regexp, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new Regexp_alternation_otherContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			State = 52; regexp_conc(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 59;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Regexp_alternationContext(new RegexpContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_regexp);
					State = 54;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 55; Match(ALTERNATION);
					State = 56; regexp_conc(0);
					}
					} 
				}
				State = 61;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,3,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Regexp_concContext : ParserRuleContext {
		public Regexp_concContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexp_conc; } }
	 
		public Regexp_concContext() { }
		public virtual void CopyFrom(Regexp_concContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Regexp_concatenationContext : Regexp_concContext {
		public Regexp_concContext regexp_conc() {
			return GetRuleContext<Regexp_concContext>(0);
		}
		public Regexp_closureContext regexp_closure() {
			return GetRuleContext<Regexp_closureContext>(0);
		}
		public Regexp_concatenationContext(Regexp_concContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.EnterRegexp_concatenation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.ExitRegexp_concatenation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRegExpParserVisitor<TResult> typedVisitor = visitor as IRegExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexp_concatenation(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Regexp_concatenation_otherContext : Regexp_concContext {
		public Regexp_closureContext regexp_closure() {
			return GetRuleContext<Regexp_closureContext>(0);
		}
		public Regexp_concatenation_otherContext(Regexp_concContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.EnterRegexp_concatenation_other(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.ExitRegexp_concatenation_other(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRegExpParserVisitor<TResult> typedVisitor = visitor as IRegExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexp_concatenation_other(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Regexp_concContext regexp_conc() {
		return regexp_conc(0);
	}

	private Regexp_concContext regexp_conc(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		Regexp_concContext _localctx = new Regexp_concContext(_ctx, _parentState);
		Regexp_concContext _prevctx = _localctx;
		int _startState = 8;
		EnterRecursionRule(_localctx, 8, RULE_regexp_conc, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new Regexp_concatenation_otherContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			State = 63; regexp_closure(0);
			}
			_ctx.stop = _input.Lt(-1);
			State = 69;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Regexp_concatenationContext(new Regexp_concContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_regexp_conc);
					State = 65;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 66; regexp_closure(0);
					}
					} 
				}
				State = 71;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,4,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Regexp_closureContext : ParserRuleContext {
		public Regexp_closureContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexp_closure; } }
	 
		public Regexp_closureContext() { }
		public virtual void CopyFrom(Regexp_closureContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Regexp_closContext : Regexp_closureContext {
		public Regexp_closureContext regexp_closure() {
			return GetRuleContext<Regexp_closureContext>(0);
		}
		public QuantifierContext quantifier() {
			return GetRuleContext<QuantifierContext>(0);
		}
		public Regexp_closContext(Regexp_closureContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.EnterRegexp_clos(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.ExitRegexp_clos(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRegExpParserVisitor<TResult> typedVisitor = visitor as IRegExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexp_clos(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Regexp_clos_otherContext : Regexp_closureContext {
		public Regexp_basicContext regexp_basic() {
			return GetRuleContext<Regexp_basicContext>(0);
		}
		public Regexp_clos_otherContext(Regexp_closureContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.EnterRegexp_clos_other(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.ExitRegexp_clos_other(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRegExpParserVisitor<TResult> typedVisitor = visitor as IRegExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexp_clos_other(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Regexp_closureContext regexp_closure() {
		return regexp_closure(0);
	}

	private Regexp_closureContext regexp_closure(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		Regexp_closureContext _localctx = new Regexp_closureContext(_ctx, _parentState);
		Regexp_closureContext _prevctx = _localctx;
		int _startState = 10;
		EnterRecursionRule(_localctx, 10, RULE_regexp_closure, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new Regexp_clos_otherContext(_localctx);
			_ctx = _localctx;
			_prevctx = _localctx;

			State = 73; regexp_basic();
			}
			_ctx.stop = _input.Lt(-1);
			State = 79;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new Regexp_closContext(new Regexp_closureContext(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_regexp_closure);
					State = 75;
					if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
					State = 76; quantifier();
					}
					} 
				}
				State = 81;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Regexp_basicContext : ParserRuleContext {
		public Regexp_basicContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_regexp_basic; } }
	 
		public Regexp_basicContext() { }
		public virtual void CopyFrom(Regexp_basicContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Regexpbasic_parenthesizedContext : Regexp_basicContext {
		public ITerminalNode LP() { return GetToken(RegExpParser.LP, 0); }
		public RegexpContext regexp() {
			return GetRuleContext<RegexpContext>(0);
		}
		public ITerminalNode RP() { return GetToken(RegExpParser.RP, 0); }
		public Regexpbasic_parenthesizedContext(Regexp_basicContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.EnterRegexpbasic_parenthesized(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.ExitRegexpbasic_parenthesized(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRegExpParserVisitor<TResult> typedVisitor = visitor as IRegExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexpbasic_parenthesized(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Regexpbasic_setContext : Regexp_basicContext {
		public SetContext set() {
			return GetRuleContext<SetContext>(0);
		}
		public Regexpbasic_setContext(Regexp_basicContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.EnterRegexpbasic_set(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.ExitRegexpbasic_set(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRegExpParserVisitor<TResult> typedVisitor = visitor as IRegExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexpbasic_set(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Regexpbasic_anyContext : Regexp_basicContext {
		public ITerminalNode ANY_EXCEPT_EOL() { return GetToken(RegExpParser.ANY_EXCEPT_EOL, 0); }
		public Regexpbasic_anyContext(Regexp_basicContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.EnterRegexpbasic_any(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.ExitRegexpbasic_any(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRegExpParserVisitor<TResult> typedVisitor = visitor as IRegExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexpbasic_any(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Regexpbasic_charContext : Regexp_basicContext {
		public CharContext @char() {
			return GetRuleContext<CharContext>(0);
		}
		public Regexpbasic_charContext(Regexp_basicContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.EnterRegexpbasic_char(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.ExitRegexpbasic_char(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRegExpParserVisitor<TResult> typedVisitor = visitor as IRegExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexpbasic_char(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Regexpbasic_eolContext : Regexp_basicContext {
		public ITerminalNode ENDOFLINE() { return GetToken(RegExpParser.ENDOFLINE, 0); }
		public Regexpbasic_eolContext(Regexp_basicContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.EnterRegexpbasic_eol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.ExitRegexpbasic_eol(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRegExpParserVisitor<TResult> typedVisitor = visitor as IRegExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexpbasic_eol(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Regexpbasic_solContext : Regexp_basicContext {
		public ITerminalNode STARTOFLINE() { return GetToken(RegExpParser.STARTOFLINE, 0); }
		public Regexpbasic_solContext(Regexp_basicContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.EnterRegexpbasic_sol(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.ExitRegexpbasic_sol(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRegExpParserVisitor<TResult> typedVisitor = visitor as IRegExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexpbasic_sol(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Regexpbasic_assertionsContext : Regexp_basicContext {
		public AssertionsContext assertions() {
			return GetRuleContext<AssertionsContext>(0);
		}
		public Regexpbasic_assertionsContext(Regexp_basicContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.EnterRegexpbasic_assertions(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.ExitRegexpbasic_assertions(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRegExpParserVisitor<TResult> typedVisitor = visitor as IRegExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexpbasic_assertions(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Regexpbasic_stringContext : Regexp_basicContext {
		public ITerminalNode STRING() { return GetToken(RegExpParser.STRING, 0); }
		public Regexpbasic_stringContext(Regexp_basicContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.EnterRegexpbasic_string(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.ExitRegexpbasic_string(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRegExpParserVisitor<TResult> typedVisitor = visitor as IRegExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRegexpbasic_string(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Regexp_basicContext regexp_basic() {
		Regexp_basicContext _localctx = new Regexp_basicContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_regexp_basic);
		try {
			State = 93;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				_localctx = new Regexpbasic_parenthesizedContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 82; Match(LP);
				State = 83; regexp(0);
				State = 84; Match(RP);
				}
				break;

			case 2:
				_localctx = new Regexpbasic_setContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 86; set();
				}
				break;

			case 3:
				_localctx = new Regexpbasic_anyContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 87; Match(ANY_EXCEPT_EOL);
				}
				break;

			case 4:
				_localctx = new Regexpbasic_charContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 88; @char();
				}
				break;

			case 5:
				_localctx = new Regexpbasic_eolContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 89; Match(ENDOFLINE);
				}
				break;

			case 6:
				_localctx = new Regexpbasic_solContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 90; Match(STARTOFLINE);
				}
				break;

			case 7:
				_localctx = new Regexpbasic_assertionsContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 91; assertions();
				}
				break;

			case 8:
				_localctx = new Regexpbasic_stringContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 92; Match(STRING);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssertionsContext : ParserRuleContext {
		public AssertionsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assertions; } }
	 
		public AssertionsContext() { }
		public virtual void CopyFrom(AssertionsContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Assertion_fwdposContext : AssertionsContext {
		public ITerminalNode LP() { return GetToken(RegExpParser.LP, 0); }
		public ITerminalNode QMARK() { return GetToken(RegExpParser.QMARK, 0); }
		public ITerminalNode EQUAL() { return GetToken(RegExpParser.EQUAL, 0); }
		public RegexpContext regexp() {
			return GetRuleContext<RegexpContext>(0);
		}
		public ITerminalNode RP() { return GetToken(RegExpParser.RP, 0); }
		public Assertion_fwdposContext(AssertionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.EnterAssertion_fwdpos(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.ExitAssertion_fwdpos(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRegExpParserVisitor<TResult> typedVisitor = visitor as IRegExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssertion_fwdpos(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Assertion_fwdnegContext : AssertionsContext {
		public ITerminalNode LP() { return GetToken(RegExpParser.LP, 0); }
		public ITerminalNode QMARK() { return GetToken(RegExpParser.QMARK, 0); }
		public ITerminalNode EXMARK() { return GetToken(RegExpParser.EXMARK, 0); }
		public RegexpContext regexp() {
			return GetRuleContext<RegexpContext>(0);
		}
		public ITerminalNode RP() { return GetToken(RegExpParser.RP, 0); }
		public Assertion_fwdnegContext(AssertionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.EnterAssertion_fwdneg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.ExitAssertion_fwdneg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRegExpParserVisitor<TResult> typedVisitor = visitor as IRegExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssertion_fwdneg(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Assertion_bwdposContext : AssertionsContext {
		public ITerminalNode LP() { return GetToken(RegExpParser.LP, 0); }
		public ITerminalNode QMARK() { return GetToken(RegExpParser.QMARK, 0); }
		public ITerminalNode LESS() { return GetToken(RegExpParser.LESS, 0); }
		public ITerminalNode EQUAL() { return GetToken(RegExpParser.EQUAL, 0); }
		public RegexpContext regexp() {
			return GetRuleContext<RegexpContext>(0);
		}
		public ITerminalNode RP() { return GetToken(RegExpParser.RP, 0); }
		public Assertion_bwdposContext(AssertionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.EnterAssertion_bwdpos(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.ExitAssertion_bwdpos(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRegExpParserVisitor<TResult> typedVisitor = visitor as IRegExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssertion_bwdpos(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Assertion_bwdnegContext : AssertionsContext {
		public ITerminalNode LP() { return GetToken(RegExpParser.LP, 0); }
		public ITerminalNode QMARK() { return GetToken(RegExpParser.QMARK, 0); }
		public ITerminalNode LESS() { return GetToken(RegExpParser.LESS, 0); }
		public ITerminalNode EXMARK() { return GetToken(RegExpParser.EXMARK, 0); }
		public RegexpContext regexp() {
			return GetRuleContext<RegexpContext>(0);
		}
		public ITerminalNode RP() { return GetToken(RegExpParser.RP, 0); }
		public Assertion_bwdnegContext(AssertionsContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.EnterAssertion_bwdneg(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.ExitAssertion_bwdneg(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRegExpParserVisitor<TResult> typedVisitor = visitor as IRegExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssertion_bwdneg(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssertionsContext assertions() {
		AssertionsContext _localctx = new AssertionsContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_assertions);
		try {
			State = 121;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,7,_ctx) ) {
			case 1:
				_localctx = new Assertion_fwdposContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 95; Match(LP);
				State = 96; Match(QMARK);
				State = 97; Match(EQUAL);
				State = 98; regexp(0);
				State = 99; Match(RP);
				}
				break;

			case 2:
				_localctx = new Assertion_fwdnegContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 101; Match(LP);
				State = 102; Match(QMARK);
				State = 103; Match(EXMARK);
				State = 104; regexp(0);
				State = 105; Match(RP);
				}
				break;

			case 3:
				_localctx = new Assertion_bwdposContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 107; Match(LP);
				State = 108; Match(QMARK);
				State = 109; Match(LESS);
				State = 110; Match(EQUAL);
				State = 111; regexp(0);
				State = 112; Match(RP);
				}
				break;

			case 4:
				_localctx = new Assertion_bwdnegContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 114; Match(LP);
				State = 115; Match(QMARK);
				State = 116; Match(LESS);
				State = 117; Match(EXMARK);
				State = 118; regexp(0);
				State = 119; Match(RP);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class QuantifierContext : ParserRuleContext {
		public QuantifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_quantifier; } }
	 
		public QuantifierContext() { }
		public virtual void CopyFrom(QuantifierContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class Quantifier_oneorzeroContext : QuantifierContext {
		public ITerminalNode QMARK() { return GetToken(RegExpParser.QMARK, 0); }
		public Quantifier_oneorzeroContext(QuantifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.EnterQuantifier_oneorzero(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.ExitQuantifier_oneorzero(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRegExpParserVisitor<TResult> typedVisitor = visitor as IRegExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuantifier_oneorzero(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Quantifier_oneormultipleContext : QuantifierContext {
		public ITerminalNode ONEORMULTIPLE() { return GetToken(RegExpParser.ONEORMULTIPLE, 0); }
		public Quantifier_oneormultipleContext(QuantifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.EnterQuantifier_oneormultiple(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.ExitQuantifier_oneormultiple(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRegExpParserVisitor<TResult> typedVisitor = visitor as IRegExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuantifier_oneormultiple(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Quantifier_oneormultipleNGContext : QuantifierContext {
		public ITerminalNode ONEORMULTIPLE_NONGREEDY() { return GetToken(RegExpParser.ONEORMULTIPLE_NONGREEDY, 0); }
		public Quantifier_oneormultipleNGContext(QuantifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.EnterQuantifier_oneormultipleNG(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.ExitQuantifier_oneormultipleNG(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRegExpParserVisitor<TResult> typedVisitor = visitor as IRegExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuantifier_oneormultipleNG(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Quantifier_noneormultipleContext : QuantifierContext {
		public ITerminalNode NONEORMULTIPLE() { return GetToken(RegExpParser.NONEORMULTIPLE, 0); }
		public Quantifier_noneormultipleContext(QuantifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.EnterQuantifier_noneormultiple(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.ExitQuantifier_noneormultiple(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRegExpParserVisitor<TResult> typedVisitor = visitor as IRegExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuantifier_noneormultiple(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Quantifier_noneormultipleNGContext : QuantifierContext {
		public ITerminalNode NONEORMULTIPLE_NONGREEDY() { return GetToken(RegExpParser.NONEORMULTIPLE_NONGREEDY, 0); }
		public Quantifier_noneormultipleNGContext(QuantifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.EnterQuantifier_noneormultipleNG(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.ExitQuantifier_noneormultipleNG(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRegExpParserVisitor<TResult> typedVisitor = visitor as IRegExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuantifier_noneormultipleNG(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Quantifier_rangeContext : QuantifierContext {
		public Finate_closure_rangeContext finate_closure_range() {
			return GetRuleContext<Finate_closure_rangeContext>(0);
		}
		public Quantifier_rangeContext(QuantifierContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.EnterQuantifier_range(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.ExitQuantifier_range(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRegExpParserVisitor<TResult> typedVisitor = visitor as IRegExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitQuantifier_range(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public QuantifierContext quantifier() {
		QuantifierContext _localctx = new QuantifierContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_quantifier);
		try {
			State = 129;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case QMARK:
				_localctx = new Quantifier_oneorzeroContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 123; Match(QMARK);
				}
				break;
			case ONEORMULTIPLE:
				_localctx = new Quantifier_oneormultipleContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 124; Match(ONEORMULTIPLE);
				}
				break;
			case ONEORMULTIPLE_NONGREEDY:
				_localctx = new Quantifier_oneormultipleNGContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 125; Match(ONEORMULTIPLE_NONGREEDY);
				}
				break;
			case NONEORMULTIPLE:
				_localctx = new Quantifier_noneormultipleContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 126; Match(NONEORMULTIPLE);
				}
				break;
			case NONEORMULTIPLE_NONGREEDY:
				_localctx = new Quantifier_noneormultipleNGContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 127; Match(NONEORMULTIPLE_NONGREEDY);
				}
				break;
			case LCA:
				_localctx = new Quantifier_rangeContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 128; finate_closure_range();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Finate_closure_rangeContext : ParserRuleContext {
		public ITerminalNode LCA() { return GetToken(RegExpParser.LCA, 0); }
		public ITerminalNode[] NUMBER() { return GetTokens(RegExpParser.NUMBER); }
		public ITerminalNode NUMBER(int i) {
			return GetToken(RegExpParser.NUMBER, i);
		}
		public ITerminalNode RAC() { return GetToken(RegExpParser.RAC, 0); }
		public ITerminalNode COMMAC() { return GetToken(RegExpParser.COMMAC, 0); }
		public Finate_closure_rangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_finate_closure_range; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.EnterFinate_closure_range(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.ExitFinate_closure_range(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRegExpParserVisitor<TResult> typedVisitor = visitor as IRegExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFinate_closure_range(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Finate_closure_rangeContext finate_closure_range() {
		Finate_closure_rangeContext _localctx = new Finate_closure_rangeContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_finate_closure_range);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 131; Match(LCA);
			State = 132; Match(NUMBER);
			State = 137;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==COMMAC) {
				{
				State = 133; Match(COMMAC);
				State = 135;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==NUMBER) {
					{
					State = 134; Match(NUMBER);
					}
				}

				}
			}

			State = 139; Match(RAC);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetContext : ParserRuleContext {
		public SetContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_set; } }
	 
		public SetContext() { }
		public virtual void CopyFrom(SetContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class SetofitemsContext : SetContext {
		public ITerminalNode LB() { return GetToken(RegExpParser.LB, 0); }
		public SetitemsContext setitems() {
			return GetRuleContext<SetitemsContext>(0);
		}
		public ITerminalNode RB() { return GetToken(RegExpParser.RB, 0); }
		public SetofitemsContext(SetContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.EnterSetofitems(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.ExitSetofitems(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRegExpParserVisitor<TResult> typedVisitor = visitor as IRegExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetofitems(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class Setofitems_negationContext : SetContext {
		public ITerminalNode LBH() { return GetToken(RegExpParser.LBH, 0); }
		public SetitemsContext setitems() {
			return GetRuleContext<SetitemsContext>(0);
		}
		public ITerminalNode RB() { return GetToken(RegExpParser.RB, 0); }
		public Setofitems_negationContext(SetContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.EnterSetofitems_negation(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.ExitSetofitems_negation(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRegExpParserVisitor<TResult> typedVisitor = visitor as IRegExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetofitems_negation(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetContext set() {
		SetContext _localctx = new SetContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_set);
		try {
			State = 149;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case LB:
				_localctx = new SetofitemsContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 141; Match(LB);
				State = 142; setitems();
				State = 143; Match(RB);
				}
				break;
			case LBH:
				_localctx = new Setofitems_negationContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 145; Match(LBH);
				State = 146; setitems();
				State = 147; Match(RB);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetitemsContext : ParserRuleContext {
		public SetitemContext[] setitem() {
			return GetRuleContexts<SetitemContext>();
		}
		public SetitemContext setitem(int i) {
			return GetRuleContext<SetitemContext>(i);
		}
		public SetitemsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setitems; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.EnterSetitems(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.ExitSetitems(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRegExpParserVisitor<TResult> typedVisitor = visitor as IRegExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetitems(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetitemsContext setitems() {
		SetitemsContext _localctx = new SetitemsContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_setitems);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 151; setitem();
				}
				}
				State = 154;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( _la==SET_LITERAL_CHARACTER || _la==CONTROL_CHARACTERS );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetitemContext : ParserRuleContext {
		public RangeContext range() {
			return GetRuleContext<RangeContext>(0);
		}
		public SetcharContext setchar() {
			return GetRuleContext<SetcharContext>(0);
		}
		public SetitemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setitem; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.EnterSetitem(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.ExitSetitem(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRegExpParserVisitor<TResult> typedVisitor = visitor as IRegExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetitem(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetitemContext setitem() {
		SetitemContext _localctx = new SetitemContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_setitem);
		try {
			State = 158;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 156; range();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 157; setchar();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SetcharContext : ParserRuleContext {
		public ITerminalNode SET_LITERAL_CHARACTER() { return GetToken(RegExpParser.SET_LITERAL_CHARACTER, 0); }
		public ITerminalNode CONTROL_CHARACTERS() { return GetToken(RegExpParser.CONTROL_CHARACTERS, 0); }
		public SetcharContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_setchar; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.EnterSetchar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.ExitSetchar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRegExpParserVisitor<TResult> typedVisitor = visitor as IRegExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSetchar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SetcharContext setchar() {
		SetcharContext _localctx = new SetcharContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_setchar);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			_la = _input.La(1);
			if ( !(_la==SET_LITERAL_CHARACTER || _la==CONTROL_CHARACTERS) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeContext : ParserRuleContext {
		public SetcharContext[] setchar() {
			return GetRuleContexts<SetcharContext>();
		}
		public SetcharContext setchar(int i) {
			return GetRuleContext<SetcharContext>(i);
		}
		public ITerminalNode HYPTHEN() { return GetToken(RegExpParser.HYPTHEN, 0); }
		public RangeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_range; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.EnterRange(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.ExitRange(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRegExpParserVisitor<TResult> typedVisitor = visitor as IRegExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRange(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RangeContext range() {
		RangeContext _localctx = new RangeContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_range);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 162; setchar();
			State = 163; Match(HYPTHEN);
			State = 164; setchar();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CharContext : ParserRuleContext {
		public ITerminalNode LITERAL_CHARACTER() { return GetToken(RegExpParser.LITERAL_CHARACTER, 0); }
		public ITerminalNode[] ESCSLASH() { return GetTokens(RegExpParser.ESCSLASH); }
		public ITerminalNode ESCSLASH(int i) {
			return GetToken(RegExpParser.ESCSLASH, i);
		}
		public ITerminalNode EXMARK() { return GetToken(RegExpParser.EXMARK, 0); }
		public ITerminalNode LESS() { return GetToken(RegExpParser.LESS, 0); }
		public ITerminalNode EQUAL() { return GetToken(RegExpParser.EQUAL, 0); }
		public ITerminalNode ENDOFLINE() { return GetToken(RegExpParser.ENDOFLINE, 0); }
		public ITerminalNode STARTOFLINE() { return GetToken(RegExpParser.STARTOFLINE, 0); }
		public ITerminalNode STARTCODEANCHOR() { return GetToken(RegExpParser.STARTCODEANCHOR, 0); }
		public ITerminalNode LP() { return GetToken(RegExpParser.LP, 0); }
		public ITerminalNode RP() { return GetToken(RegExpParser.RP, 0); }
		public ITerminalNode LB() { return GetToken(RegExpParser.LB, 0); }
		public ITerminalNode ANY_EXCEPT_EOL() { return GetToken(RegExpParser.ANY_EXCEPT_EOL, 0); }
		public ITerminalNode DIESIS() { return GetToken(RegExpParser.DIESIS, 0); }
		public ITerminalNode QMARK() { return GetToken(RegExpParser.QMARK, 0); }
		public ITerminalNode ONEORMULTIPLE() { return GetToken(RegExpParser.ONEORMULTIPLE, 0); }
		public ITerminalNode NONEORMULTIPLE() { return GetToken(RegExpParser.NONEORMULTIPLE, 0); }
		public ITerminalNode ALTERNATION() { return GetToken(RegExpParser.ALTERNATION, 0); }
		public CharContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_char; } }
		public override void EnterRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.EnterChar(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IRegExpParserListener typedListener = listener as IRegExpParserListener;
			if (typedListener != null) typedListener.ExitChar(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRegExpParserVisitor<TResult> typedVisitor = visitor as IRegExpParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitChar(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CharContext @char() {
		CharContext _localctx = new CharContext(_ctx, State);
		EnterRule(_localctx, 30, RULE_char);
		int _la;
		try {
			State = 208;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,18,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 167;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ESCSLASH) {
					{
					State = 166; Match(ESCSLASH);
					}
				}

				State = 169; Match(LITERAL_CHARACTER);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 171;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ESCSLASH) {
					{
					State = 170; Match(ESCSLASH);
					}
				}

				State = 173; Match(EXMARK);
				}
				break;

			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 175;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ESCSLASH) {
					{
					State = 174; Match(ESCSLASH);
					}
				}

				State = 177; Match(LESS);
				}
				break;

			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 179;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ESCSLASH) {
					{
					State = 178; Match(ESCSLASH);
					}
				}

				State = 181; Match(EQUAL);
				}
				break;

			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 182; Match(ESCSLASH);
				State = 183; Match(ENDOFLINE);
				}
				break;

			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 184; Match(ESCSLASH);
				State = 185; Match(STARTOFLINE);
				}
				break;

			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 186; Match(ESCSLASH);
				State = 187; Match(STARTCODEANCHOR);
				}
				break;

			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 188; Match(ESCSLASH);
				State = 189; Match(LP);
				}
				break;

			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 190; Match(ESCSLASH);
				State = 191; Match(RP);
				}
				break;

			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 192; Match(ESCSLASH);
				State = 193; Match(LB);
				}
				break;

			case 11:
				EnterOuterAlt(_localctx, 11);
				{
				State = 194; Match(ESCSLASH);
				State = 195; Match(ANY_EXCEPT_EOL);
				}
				break;

			case 12:
				EnterOuterAlt(_localctx, 12);
				{
				State = 196; Match(ESCSLASH);
				State = 197; Match(DIESIS);
				}
				break;

			case 13:
				EnterOuterAlt(_localctx, 13);
				{
				State = 198; Match(ESCSLASH);
				State = 199; Match(ESCSLASH);
				}
				break;

			case 14:
				EnterOuterAlt(_localctx, 14);
				{
				State = 200; Match(ESCSLASH);
				State = 201; Match(QMARK);
				}
				break;

			case 15:
				EnterOuterAlt(_localctx, 15);
				{
				State = 202; Match(ESCSLASH);
				State = 203; Match(ONEORMULTIPLE);
				}
				break;

			case 16:
				EnterOuterAlt(_localctx, 16);
				{
				State = 204; Match(ESCSLASH);
				State = 205; Match(NONEORMULTIPLE);
				}
				break;

			case 17:
				EnterOuterAlt(_localctx, 17);
				{
				State = 206; Match(ESCSLASH);
				State = 207; Match(ALTERNATION);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 3: return regexp_sempred((RegexpContext)_localctx, predIndex);

		case 4: return regexp_conc_sempred((Regexp_concContext)_localctx, predIndex);

		case 5: return regexp_closure_sempred((Regexp_closureContext)_localctx, predIndex);
		}
		return true;
	}
	private bool regexp_sempred(RegexpContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool regexp_conc_sempred(Regexp_concContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(_ctx, 2);
		}
		return true;
	}
	private bool regexp_closure_sempred(Regexp_closureContext _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3,\xD5\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10\t"+
		"\x10\x4\x11\t\x11\x3\x2\x6\x2$\n\x2\r\x2\xE\x2%\x3\x3\x5\x3)\n\x3\x3\x3"+
		"\x3\x3\x3\x3\x5\x3.\n\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3"+
		"\x5\x3\x5\x3\x5\x3\x5\x3\x5\a\x5<\n\x5\f\x5\xE\x5?\v\x5\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\a\x6\x46\n\x6\f\x6\xE\x6I\v\x6\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\a\aP\n\a\f\a\xE\aS\v\a\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b\x3\b"+
		"\x3\b\x3\b\x5\b`\n\b\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t"+
		"\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t\x3\t"+
		"\x3\t\x3\t\x5\t|\n\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n\x84\n\n\x3\v\x3"+
		"\v\x3\v\x3\v\x5\v\x8A\n\v\x5\v\x8C\n\v\x3\v\x3\v\x3\f\x3\f\x3\f\x3\f\x3"+
		"\f\x3\f\x3\f\x3\f\x5\f\x98\n\f\x3\r\x6\r\x9B\n\r\r\r\xE\r\x9C\x3\xE\x3"+
		"\xE\x5\xE\xA1\n\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x10\x3\x10\x3\x11\x5\x11"+
		"\xAA\n\x11\x3\x11\x3\x11\x5\x11\xAE\n\x11\x3\x11\x3\x11\x5\x11\xB2\n\x11"+
		"\x3\x11\x3\x11\x5\x11\xB6\n\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x5\x11\xD3\n\x11\x3\x11\x2\x2\x5\b\n\f\x12\x2\x2\x4\x2\x6"+
		"\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18\x2\x1A\x2\x1C"+
		"\x2\x1E\x2 \x2\x2\x3\x4\x2&&))\xF2\x2#\x3\x2\x2\x2\x4(\x3\x2\x2\x2\x6"+
		"\x31\x3\x2\x2\x2\b\x35\x3\x2\x2\x2\n@\x3\x2\x2\x2\fJ\x3\x2\x2\x2\xE_\x3"+
		"\x2\x2\x2\x10{\x3\x2\x2\x2\x12\x83\x3\x2\x2\x2\x14\x85\x3\x2\x2\x2\x16"+
		"\x97\x3\x2\x2\x2\x18\x9A\x3\x2\x2\x2\x1A\xA0\x3\x2\x2\x2\x1C\xA2\x3\x2"+
		"\x2\x2\x1E\xA4\x3\x2\x2\x2 \xD2\x3\x2\x2\x2\"$\x5\x4\x3\x2#\"\x3\x2\x2"+
		"\x2$%\x3\x2\x2\x2%#\x3\x2\x2\x2%&\x3\x2\x2\x2&\x3\x3\x2\x2\x2\')\a\x3"+
		"\x2\x2(\'\x3\x2\x2\x2()\x3\x2\x2\x2)*\x3\x2\x2\x2*+\a\x4\x2\x2+-\x5\b"+
		"\x5\x2,.\x5\x6\x4\x2-,\x3\x2\x2\x2-.\x3\x2\x2\x2./\x3\x2\x2\x2/\x30\a"+
		"\x5\x2\x2\x30\x5\x3\x2\x2\x2\x31\x32\a\v\x2\x2\x32\x33\a\x1F\x2\x2\x33"+
		"\x34\a \x2\x2\x34\a\x3\x2\x2\x2\x35\x36\b\x5\x1\x2\x36\x37\x5\n\x6\x2"+
		"\x37=\x3\x2\x2\x2\x38\x39\f\x4\x2\x2\x39:\a\x16\x2\x2:<\x5\n\x6\x2;\x38"+
		"\x3\x2\x2\x2<?\x3\x2\x2\x2=;\x3\x2\x2\x2=>\x3\x2\x2\x2>\t\x3\x2\x2\x2"+
		"?=\x3\x2\x2\x2@\x41\b\x6\x1\x2\x41\x42\x5\f\a\x2\x42G\x3\x2\x2\x2\x43"+
		"\x44\f\x4\x2\x2\x44\x46\x5\f\a\x2\x45\x43\x3\x2\x2\x2\x46I\x3\x2\x2\x2"+
		"G\x45\x3\x2\x2\x2GH\x3\x2\x2\x2H\v\x3\x2\x2\x2IG\x3\x2\x2\x2JK\b\a\x1"+
		"\x2KL\x5\xE\b\x2LQ\x3\x2\x2\x2MN\f\x4\x2\x2NP\x5\x12\n\x2OM\x3\x2\x2\x2"+
		"PS\x3\x2\x2\x2QO\x3\x2\x2\x2QR\x3\x2\x2\x2R\r\x3\x2\x2\x2SQ\x3\x2\x2\x2"+
		"TU\a\f\x2\x2UV\x5\b\x5\x2VW\a\r\x2\x2W`\x3\x2\x2\x2X`\x5\x16\f\x2Y`\a"+
		"\x10\x2\x2Z`\x5 \x11\x2[`\a\t\x2\x2\\`\a\n\x2\x2]`\x5\x10\t\x2^`\a,\x2"+
		"\x2_T\x3\x2\x2\x2_X\x3\x2\x2\x2_Y\x3\x2\x2\x2_Z\x3\x2\x2\x2_[\x3\x2\x2"+
		"\x2_\\\x3\x2\x2\x2_]\x3\x2\x2\x2_^\x3\x2\x2\x2`\xF\x3\x2\x2\x2\x61\x62"+
		"\a\f\x2\x2\x62\x63\a\xE\x2\x2\x63\x64\a\x1A\x2\x2\x64\x65\x5\b\x5\x2\x65"+
		"\x66\a\r\x2\x2\x66|\x3\x2\x2\x2gh\a\f\x2\x2hi\a\xE\x2\x2ij\a\x18\x2\x2"+
		"jk\x5\b\x5\x2kl\a\r\x2\x2l|\x3\x2\x2\x2mn\a\f\x2\x2no\a\xE\x2\x2op\a\x19"+
		"\x2\x2pq\a\x1A\x2\x2qr\x5\b\x5\x2rs\a\r\x2\x2s|\x3\x2\x2\x2tu\a\f\x2\x2"+
		"uv\a\xE\x2\x2vw\a\x19\x2\x2wx\a\x18\x2\x2xy\x5\b\x5\x2yz\a\r\x2\x2z|\x3"+
		"\x2\x2\x2{\x61\x3\x2\x2\x2{g\x3\x2\x2\x2{m\x3\x2\x2\x2{t\x3\x2\x2\x2|"+
		"\x11\x3\x2\x2\x2}\x84\a\xE\x2\x2~\x84\a\x12\x2\x2\x7F\x84\a\x14\x2\x2"+
		"\x80\x84\a\x13\x2\x2\x81\x84\a\x15\x2\x2\x82\x84\x5\x14\v\x2\x83}\x3\x2"+
		"\x2\x2\x83~\x3\x2\x2\x2\x83\x7F\x3\x2\x2\x2\x83\x80\x3\x2\x2\x2\x83\x81"+
		"\x3\x2\x2\x2\x83\x82\x3\x2\x2\x2\x84\x13\x3\x2\x2\x2\x85\x86\a!\x2\x2"+
		"\x86\x8B\a$\x2\x2\x87\x89\a#\x2\x2\x88\x8A\a$\x2\x2\x89\x88\x3\x2\x2\x2"+
		"\x89\x8A\x3\x2\x2\x2\x8A\x8C\x3\x2\x2\x2\x8B\x87\x3\x2\x2\x2\x8B\x8C\x3"+
		"\x2\x2\x2\x8C\x8D\x3\x2\x2\x2\x8D\x8E\a\"\x2\x2\x8E\x15\x3\x2\x2\x2\x8F"+
		"\x90\a\a\x2\x2\x90\x91\x5\x18\r\x2\x91\x92\a(\x2\x2\x92\x98\x3\x2\x2\x2"+
		"\x93\x94\a\b\x2\x2\x94\x95\x5\x18\r\x2\x95\x96\a(\x2\x2\x96\x98\x3\x2"+
		"\x2\x2\x97\x8F\x3\x2\x2\x2\x97\x93\x3\x2\x2\x2\x98\x17\x3\x2\x2\x2\x99"+
		"\x9B\x5\x1A\xE\x2\x9A\x99\x3\x2\x2\x2\x9B\x9C\x3\x2\x2\x2\x9C\x9A\x3\x2"+
		"\x2\x2\x9C\x9D\x3\x2\x2\x2\x9D\x19\x3\x2\x2\x2\x9E\xA1\x5\x1E\x10\x2\x9F"+
		"\xA1\x5\x1C\xF\x2\xA0\x9E\x3\x2\x2\x2\xA0\x9F\x3\x2\x2\x2\xA1\x1B\x3\x2"+
		"\x2\x2\xA2\xA3\t\x2\x2\x2\xA3\x1D\x3\x2\x2\x2\xA4\xA5\x5\x1C\xF\x2\xA5"+
		"\xA6\a\'\x2\x2\xA6\xA7\x5\x1C\xF\x2\xA7\x1F\x3\x2\x2\x2\xA8\xAA\a\x17"+
		"\x2\x2\xA9\xA8\x3\x2\x2\x2\xA9\xAA\x3\x2\x2\x2\xAA\xAB\x3\x2\x2\x2\xAB"+
		"\xD3\a\x1C\x2\x2\xAC\xAE\a\x17\x2\x2\xAD\xAC\x3\x2\x2\x2\xAD\xAE\x3\x2"+
		"\x2\x2\xAE\xAF\x3\x2\x2\x2\xAF\xD3\a\x18\x2\x2\xB0\xB2\a\x17\x2\x2\xB1"+
		"\xB0\x3\x2\x2\x2\xB1\xB2\x3\x2\x2\x2\xB2\xB3\x3\x2\x2\x2\xB3\xD3\a\x19"+
		"\x2\x2\xB4\xB6\a\x17\x2\x2\xB5\xB4\x3\x2\x2\x2\xB5\xB6\x3\x2\x2\x2\xB6"+
		"\xB7\x3\x2\x2\x2\xB7\xD3\a\x1A\x2\x2\xB8\xB9\a\x17\x2\x2\xB9\xD3\a\t\x2"+
		"\x2\xBA\xBB\a\x17\x2\x2\xBB\xD3\a\n\x2\x2\xBC\xBD\a\x17\x2\x2\xBD\xD3"+
		"\a\v\x2\x2\xBE\xBF\a\x17\x2\x2\xBF\xD3\a\f\x2\x2\xC0\xC1\a\x17\x2\x2\xC1"+
		"\xD3\a\r\x2\x2\xC2\xC3\a\x17\x2\x2\xC3\xD3\a\a\x2\x2\xC4\xC5\a\x17\x2"+
		"\x2\xC5\xD3\a\x10\x2\x2\xC6\xC7\a\x17\x2\x2\xC7\xD3\a\xF\x2\x2\xC8\xC9"+
		"\a\x17\x2\x2\xC9\xD3\a\x17\x2\x2\xCA\xCB\a\x17\x2\x2\xCB\xD3\a\xE\x2\x2"+
		"\xCC\xCD\a\x17\x2\x2\xCD\xD3\a\x12\x2\x2\xCE\xCF\a\x17\x2\x2\xCF\xD3\a"+
		"\x13\x2\x2\xD0\xD1\a\x17\x2\x2\xD1\xD3\a\x16\x2\x2\xD2\xA9\x3\x2\x2\x2"+
		"\xD2\xAD\x3\x2\x2\x2\xD2\xB1\x3\x2\x2\x2\xD2\xB5\x3\x2\x2\x2\xD2\xB8\x3"+
		"\x2\x2\x2\xD2\xBA\x3\x2\x2\x2\xD2\xBC\x3\x2\x2\x2\xD2\xBE\x3\x2\x2\x2"+
		"\xD2\xC0\x3\x2\x2\x2\xD2\xC2\x3\x2\x2\x2\xD2\xC4\x3\x2\x2\x2\xD2\xC6\x3"+
		"\x2\x2\x2\xD2\xC8\x3\x2\x2\x2\xD2\xCA\x3\x2\x2\x2\xD2\xCC\x3\x2\x2\x2"+
		"\xD2\xCE\x3\x2\x2\x2\xD2\xD0\x3\x2\x2\x2\xD3!\x3\x2\x2\x2\x15%(-=GQ_{"+
		"\x83\x89\x8B\x97\x9C\xA0\xA9\xAD\xB1\xB5\xD2";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace Parser
