//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from D:\MyPrivateWork\MyApps\MyApplications\EDUFLEX\Parser\RegExpParser.g4 by ANTLR 4.6.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Parser {

using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IRegExpParserListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.5")]
[System.CLSCompliant(false)]
public partial class RegExpParserBaseListener : IRegExpParserListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>regexp_alternation</c>
	/// labeled alternative in <see cref="RegExpParser.regexp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRegexp_alternation([NotNull] RegExpParser.Regexp_alternationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>regexp_alternation</c>
	/// labeled alternative in <see cref="RegExpParser.regexp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRegexp_alternation([NotNull] RegExpParser.Regexp_alternationContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>regexp_alternation_other</c>
	/// labeled alternative in <see cref="RegExpParser.regexp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRegexp_alternation_other([NotNull] RegExpParser.Regexp_alternation_otherContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>regexp_alternation_other</c>
	/// labeled alternative in <see cref="RegExpParser.regexp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRegexp_alternation_other([NotNull] RegExpParser.Regexp_alternation_otherContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>regexp_concatenation</c>
	/// labeled alternative in <see cref="RegExpParser.regexp_conc"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRegexp_concatenation([NotNull] RegExpParser.Regexp_concatenationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>regexp_concatenation</c>
	/// labeled alternative in <see cref="RegExpParser.regexp_conc"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRegexp_concatenation([NotNull] RegExpParser.Regexp_concatenationContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>regexp_concatenation_other</c>
	/// labeled alternative in <see cref="RegExpParser.regexp_conc"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRegexp_concatenation_other([NotNull] RegExpParser.Regexp_concatenation_otherContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>regexp_concatenation_other</c>
	/// labeled alternative in <see cref="RegExpParser.regexp_conc"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRegexp_concatenation_other([NotNull] RegExpParser.Regexp_concatenation_otherContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>regexp_clos</c>
	/// labeled alternative in <see cref="RegExpParser.regexp_closure"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRegexp_clos([NotNull] RegExpParser.Regexp_closContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>regexp_clos</c>
	/// labeled alternative in <see cref="RegExpParser.regexp_closure"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRegexp_clos([NotNull] RegExpParser.Regexp_closContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>regexp_clos_other</c>
	/// labeled alternative in <see cref="RegExpParser.regexp_closure"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRegexp_clos_other([NotNull] RegExpParser.Regexp_clos_otherContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>regexp_clos_other</c>
	/// labeled alternative in <see cref="RegExpParser.regexp_closure"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRegexp_clos_other([NotNull] RegExpParser.Regexp_clos_otherContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>regexpbasic_parenthesized</c>
	/// labeled alternative in <see cref="RegExpParser.regexp_basic"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRegexpbasic_parenthesized([NotNull] RegExpParser.Regexpbasic_parenthesizedContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>regexpbasic_parenthesized</c>
	/// labeled alternative in <see cref="RegExpParser.regexp_basic"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRegexpbasic_parenthesized([NotNull] RegExpParser.Regexpbasic_parenthesizedContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>regexpbasic_set</c>
	/// labeled alternative in <see cref="RegExpParser.regexp_basic"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRegexpbasic_set([NotNull] RegExpParser.Regexpbasic_setContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>regexpbasic_set</c>
	/// labeled alternative in <see cref="RegExpParser.regexp_basic"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRegexpbasic_set([NotNull] RegExpParser.Regexpbasic_setContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>regexpbasic_any</c>
	/// labeled alternative in <see cref="RegExpParser.regexp_basic"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRegexpbasic_any([NotNull] RegExpParser.Regexpbasic_anyContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>regexpbasic_any</c>
	/// labeled alternative in <see cref="RegExpParser.regexp_basic"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRegexpbasic_any([NotNull] RegExpParser.Regexpbasic_anyContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>regexpbasic_char</c>
	/// labeled alternative in <see cref="RegExpParser.regexp_basic"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRegexpbasic_char([NotNull] RegExpParser.Regexpbasic_charContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>regexpbasic_char</c>
	/// labeled alternative in <see cref="RegExpParser.regexp_basic"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRegexpbasic_char([NotNull] RegExpParser.Regexpbasic_charContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>regexpbasic_eol</c>
	/// labeled alternative in <see cref="RegExpParser.regexp_basic"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRegexpbasic_eol([NotNull] RegExpParser.Regexpbasic_eolContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>regexpbasic_eol</c>
	/// labeled alternative in <see cref="RegExpParser.regexp_basic"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRegexpbasic_eol([NotNull] RegExpParser.Regexpbasic_eolContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>regexpbasic_sol</c>
	/// labeled alternative in <see cref="RegExpParser.regexp_basic"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRegexpbasic_sol([NotNull] RegExpParser.Regexpbasic_solContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>regexpbasic_sol</c>
	/// labeled alternative in <see cref="RegExpParser.regexp_basic"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRegexpbasic_sol([NotNull] RegExpParser.Regexpbasic_solContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>regexpbasic_assertions</c>
	/// labeled alternative in <see cref="RegExpParser.regexp_basic"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRegexpbasic_assertions([NotNull] RegExpParser.Regexpbasic_assertionsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>regexpbasic_assertions</c>
	/// labeled alternative in <see cref="RegExpParser.regexp_basic"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRegexpbasic_assertions([NotNull] RegExpParser.Regexpbasic_assertionsContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>regexpbasic_string</c>
	/// labeled alternative in <see cref="RegExpParser.regexp_basic"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRegexpbasic_string([NotNull] RegExpParser.Regexpbasic_stringContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>regexpbasic_string</c>
	/// labeled alternative in <see cref="RegExpParser.regexp_basic"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRegexpbasic_string([NotNull] RegExpParser.Regexpbasic_stringContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>assertion_fwdpos</c>
	/// labeled alternative in <see cref="RegExpParser.assertions"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssertion_fwdpos([NotNull] RegExpParser.Assertion_fwdposContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>assertion_fwdpos</c>
	/// labeled alternative in <see cref="RegExpParser.assertions"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssertion_fwdpos([NotNull] RegExpParser.Assertion_fwdposContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>assertion_fwdneg</c>
	/// labeled alternative in <see cref="RegExpParser.assertions"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssertion_fwdneg([NotNull] RegExpParser.Assertion_fwdnegContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>assertion_fwdneg</c>
	/// labeled alternative in <see cref="RegExpParser.assertions"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssertion_fwdneg([NotNull] RegExpParser.Assertion_fwdnegContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>assertion_bwdpos</c>
	/// labeled alternative in <see cref="RegExpParser.assertions"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssertion_bwdpos([NotNull] RegExpParser.Assertion_bwdposContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>assertion_bwdpos</c>
	/// labeled alternative in <see cref="RegExpParser.assertions"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssertion_bwdpos([NotNull] RegExpParser.Assertion_bwdposContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>assertion_bwdneg</c>
	/// labeled alternative in <see cref="RegExpParser.assertions"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssertion_bwdneg([NotNull] RegExpParser.Assertion_bwdnegContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>assertion_bwdneg</c>
	/// labeled alternative in <see cref="RegExpParser.assertions"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssertion_bwdneg([NotNull] RegExpParser.Assertion_bwdnegContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>quantifier_oneorzero</c>
	/// labeled alternative in <see cref="RegExpParser.quantifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterQuantifier_oneorzero([NotNull] RegExpParser.Quantifier_oneorzeroContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>quantifier_oneorzero</c>
	/// labeled alternative in <see cref="RegExpParser.quantifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitQuantifier_oneorzero([NotNull] RegExpParser.Quantifier_oneorzeroContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>quantifier_oneormultiple</c>
	/// labeled alternative in <see cref="RegExpParser.quantifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterQuantifier_oneormultiple([NotNull] RegExpParser.Quantifier_oneormultipleContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>quantifier_oneormultiple</c>
	/// labeled alternative in <see cref="RegExpParser.quantifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitQuantifier_oneormultiple([NotNull] RegExpParser.Quantifier_oneormultipleContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>quantifier_oneormultipleNG</c>
	/// labeled alternative in <see cref="RegExpParser.quantifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterQuantifier_oneormultipleNG([NotNull] RegExpParser.Quantifier_oneormultipleNGContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>quantifier_oneormultipleNG</c>
	/// labeled alternative in <see cref="RegExpParser.quantifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitQuantifier_oneormultipleNG([NotNull] RegExpParser.Quantifier_oneormultipleNGContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>quantifier_noneormultiple</c>
	/// labeled alternative in <see cref="RegExpParser.quantifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterQuantifier_noneormultiple([NotNull] RegExpParser.Quantifier_noneormultipleContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>quantifier_noneormultiple</c>
	/// labeled alternative in <see cref="RegExpParser.quantifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitQuantifier_noneormultiple([NotNull] RegExpParser.Quantifier_noneormultipleContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>quantifier_noneormultipleNG</c>
	/// labeled alternative in <see cref="RegExpParser.quantifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterQuantifier_noneormultipleNG([NotNull] RegExpParser.Quantifier_noneormultipleNGContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>quantifier_noneormultipleNG</c>
	/// labeled alternative in <see cref="RegExpParser.quantifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitQuantifier_noneormultipleNG([NotNull] RegExpParser.Quantifier_noneormultipleNGContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>quantifier_range</c>
	/// labeled alternative in <see cref="RegExpParser.quantifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterQuantifier_range([NotNull] RegExpParser.Quantifier_rangeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>quantifier_range</c>
	/// labeled alternative in <see cref="RegExpParser.quantifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitQuantifier_range([NotNull] RegExpParser.Quantifier_rangeContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>setofitems</c>
	/// labeled alternative in <see cref="RegExpParser.set"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSetofitems([NotNull] RegExpParser.SetofitemsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>setofitems</c>
	/// labeled alternative in <see cref="RegExpParser.set"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSetofitems([NotNull] RegExpParser.SetofitemsContext context) { }

	/// <summary>
	/// Enter a parse tree produced by the <c>setofitems_negation</c>
	/// labeled alternative in <see cref="RegExpParser.set"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSetofitems_negation([NotNull] RegExpParser.Setofitems_negationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>setofitems_negation</c>
	/// labeled alternative in <see cref="RegExpParser.set"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSetofitems_negation([NotNull] RegExpParser.Setofitems_negationContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RegExpParser.lexerDescription"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterLexerDescription([NotNull] RegExpParser.LexerDescriptionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegExpParser.lexerDescription"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitLexerDescription([NotNull] RegExpParser.LexerDescriptionContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RegExpParser.regexp_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRegexp_statement([NotNull] RegExpParser.Regexp_statementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegExpParser.regexp_statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRegexp_statement([NotNull] RegExpParser.Regexp_statementContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RegExpParser.action_code"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAction_code([NotNull] RegExpParser.Action_codeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegExpParser.action_code"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAction_code([NotNull] RegExpParser.Action_codeContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RegExpParser.regexp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRegexp([NotNull] RegExpParser.RegexpContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegExpParser.regexp"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRegexp([NotNull] RegExpParser.RegexpContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RegExpParser.regexp_conc"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRegexp_conc([NotNull] RegExpParser.Regexp_concContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegExpParser.regexp_conc"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRegexp_conc([NotNull] RegExpParser.Regexp_concContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RegExpParser.regexp_closure"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRegexp_closure([NotNull] RegExpParser.Regexp_closureContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegExpParser.regexp_closure"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRegexp_closure([NotNull] RegExpParser.Regexp_closureContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RegExpParser.regexp_basic"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRegexp_basic([NotNull] RegExpParser.Regexp_basicContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegExpParser.regexp_basic"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRegexp_basic([NotNull] RegExpParser.Regexp_basicContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RegExpParser.assertions"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssertions([NotNull] RegExpParser.AssertionsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegExpParser.assertions"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssertions([NotNull] RegExpParser.AssertionsContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RegExpParser.quantifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterQuantifier([NotNull] RegExpParser.QuantifierContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegExpParser.quantifier"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitQuantifier([NotNull] RegExpParser.QuantifierContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RegExpParser.finate_closure_range"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFinate_closure_range([NotNull] RegExpParser.Finate_closure_rangeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegExpParser.finate_closure_range"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFinate_closure_range([NotNull] RegExpParser.Finate_closure_rangeContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RegExpParser.set"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSet([NotNull] RegExpParser.SetContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegExpParser.set"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSet([NotNull] RegExpParser.SetContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RegExpParser.setitems"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSetitems([NotNull] RegExpParser.SetitemsContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegExpParser.setitems"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSetitems([NotNull] RegExpParser.SetitemsContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RegExpParser.setitem"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSetitem([NotNull] RegExpParser.SetitemContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegExpParser.setitem"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSetitem([NotNull] RegExpParser.SetitemContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RegExpParser.setchar"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterSetchar([NotNull] RegExpParser.SetcharContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegExpParser.setchar"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitSetchar([NotNull] RegExpParser.SetcharContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RegExpParser.range"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterRange([NotNull] RegExpParser.RangeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegExpParser.range"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitRange([NotNull] RegExpParser.RangeContext context) { }

	/// <summary>
	/// Enter a parse tree produced by <see cref="RegExpParser.char"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterChar([NotNull] RegExpParser.CharContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RegExpParser.char"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitChar([NotNull] RegExpParser.CharContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
} // namespace Parser
