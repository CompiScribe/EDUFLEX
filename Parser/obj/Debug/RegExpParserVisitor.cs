//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\MyPrivateWork\MyApps\MyApplications\EDUFLEX\Parser\RegExpParser.g4 by ANTLR 4.6.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Parser {
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="RegExpParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.5")]
[System.CLSCompliant(false)]
public interface IRegExpParserVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by the <c>regexp_alternation</c>
	/// labeled alternative in <see cref="RegExpParser.regexp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRegexp_alternation([NotNull] RegExpParser.Regexp_alternationContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>regexp_alternation_other</c>
	/// labeled alternative in <see cref="RegExpParser.regexp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRegexp_alternation_other([NotNull] RegExpParser.Regexp_alternation_otherContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>regexp_concatenation</c>
	/// labeled alternative in <see cref="RegExpParser.regexp_conc"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRegexp_concatenation([NotNull] RegExpParser.Regexp_concatenationContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>regexp_concatenation_other</c>
	/// labeled alternative in <see cref="RegExpParser.regexp_conc"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRegexp_concatenation_other([NotNull] RegExpParser.Regexp_concatenation_otherContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>regexp_clos</c>
	/// labeled alternative in <see cref="RegExpParser.regexp_closure"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRegexp_clos([NotNull] RegExpParser.Regexp_closContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>regexp_clos_other</c>
	/// labeled alternative in <see cref="RegExpParser.regexp_closure"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRegexp_clos_other([NotNull] RegExpParser.Regexp_clos_otherContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>regexpbasic_parenthesized</c>
	/// labeled alternative in <see cref="RegExpParser.regexp_basic"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRegexpbasic_parenthesized([NotNull] RegExpParser.Regexpbasic_parenthesizedContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>regexpbasic_set</c>
	/// labeled alternative in <see cref="RegExpParser.regexp_basic"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRegexpbasic_set([NotNull] RegExpParser.Regexpbasic_setContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>regexpbasic_any</c>
	/// labeled alternative in <see cref="RegExpParser.regexp_basic"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRegexpbasic_any([NotNull] RegExpParser.Regexpbasic_anyContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>regexpbasic_char</c>
	/// labeled alternative in <see cref="RegExpParser.regexp_basic"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRegexpbasic_char([NotNull] RegExpParser.Regexpbasic_charContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>regexpbasic_eol</c>
	/// labeled alternative in <see cref="RegExpParser.regexp_basic"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRegexpbasic_eol([NotNull] RegExpParser.Regexpbasic_eolContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>regexpbasic_sol</c>
	/// labeled alternative in <see cref="RegExpParser.regexp_basic"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRegexpbasic_sol([NotNull] RegExpParser.Regexpbasic_solContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>regexpbasic_assertions</c>
	/// labeled alternative in <see cref="RegExpParser.regexp_basic"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRegexpbasic_assertions([NotNull] RegExpParser.Regexpbasic_assertionsContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>regexpbasic_string</c>
	/// labeled alternative in <see cref="RegExpParser.regexp_basic"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRegexpbasic_string([NotNull] RegExpParser.Regexpbasic_stringContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>assertion_fwdpos</c>
	/// labeled alternative in <see cref="RegExpParser.assertions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssertion_fwdpos([NotNull] RegExpParser.Assertion_fwdposContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>assertion_fwdneg</c>
	/// labeled alternative in <see cref="RegExpParser.assertions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssertion_fwdneg([NotNull] RegExpParser.Assertion_fwdnegContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>assertion_bwdpos</c>
	/// labeled alternative in <see cref="RegExpParser.assertions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssertion_bwdpos([NotNull] RegExpParser.Assertion_bwdposContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>assertion_bwdneg</c>
	/// labeled alternative in <see cref="RegExpParser.assertions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssertion_bwdneg([NotNull] RegExpParser.Assertion_bwdnegContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>quantifier_oneorzero</c>
	/// labeled alternative in <see cref="RegExpParser.quantifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitQuantifier_oneorzero([NotNull] RegExpParser.Quantifier_oneorzeroContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>quantifier_oneormultiple</c>
	/// labeled alternative in <see cref="RegExpParser.quantifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitQuantifier_oneormultiple([NotNull] RegExpParser.Quantifier_oneormultipleContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>quantifier_oneormultipleNG</c>
	/// labeled alternative in <see cref="RegExpParser.quantifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitQuantifier_oneormultipleNG([NotNull] RegExpParser.Quantifier_oneormultipleNGContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>quantifier_noneormultiple</c>
	/// labeled alternative in <see cref="RegExpParser.quantifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitQuantifier_noneormultiple([NotNull] RegExpParser.Quantifier_noneormultipleContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>quantifier_noneormultipleNG</c>
	/// labeled alternative in <see cref="RegExpParser.quantifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitQuantifier_noneormultipleNG([NotNull] RegExpParser.Quantifier_noneormultipleNGContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>quantifier_range</c>
	/// labeled alternative in <see cref="RegExpParser.quantifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitQuantifier_range([NotNull] RegExpParser.Quantifier_rangeContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>setofitems</c>
	/// labeled alternative in <see cref="RegExpParser.set"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSetofitems([NotNull] RegExpParser.SetofitemsContext context);

	/// <summary>
	/// Visit a parse tree produced by the <c>setofitems_negation</c>
	/// labeled alternative in <see cref="RegExpParser.set"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSetofitems_negation([NotNull] RegExpParser.Setofitems_negationContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="RegExpParser.lexerDescription"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLexerDescription([NotNull] RegExpParser.LexerDescriptionContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="RegExpParser.regexp_statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRegexp_statement([NotNull] RegExpParser.Regexp_statementContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="RegExpParser.action_code"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAction_code([NotNull] RegExpParser.Action_codeContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="RegExpParser.regexp"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRegexp([NotNull] RegExpParser.RegexpContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="RegExpParser.regexp_conc"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRegexp_conc([NotNull] RegExpParser.Regexp_concContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="RegExpParser.regexp_closure"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRegexp_closure([NotNull] RegExpParser.Regexp_closureContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="RegExpParser.regexp_basic"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRegexp_basic([NotNull] RegExpParser.Regexp_basicContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="RegExpParser.assertions"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssertions([NotNull] RegExpParser.AssertionsContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="RegExpParser.quantifier"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitQuantifier([NotNull] RegExpParser.QuantifierContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="RegExpParser.finate_closure_range"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFinate_closure_range([NotNull] RegExpParser.Finate_closure_rangeContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="RegExpParser.set"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSet([NotNull] RegExpParser.SetContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="RegExpParser.setitems"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSetitems([NotNull] RegExpParser.SetitemsContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="RegExpParser.setitem"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSetitem([NotNull] RegExpParser.SetitemContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="RegExpParser.setchar"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitSetchar([NotNull] RegExpParser.SetcharContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="RegExpParser.range"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRange([NotNull] RegExpParser.RangeContext context);

	/// <summary>
	/// Visit a parse tree produced by <see cref="RegExpParser.char"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitChar([NotNull] RegExpParser.CharContext context);
}
} // namespace Parser
